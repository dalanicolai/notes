#+OPTIONS: toc:nil
#+begin_export markdown
---
layout: page
title: Spacemacs notes
menubar_toc: true
toc_title: Table of contents
---
#+end_export
* Spacemacs notes (recipes)
** Keyboard macro's
*** Reformat to columns
   There was the following question on Gitter:
  #+begin_quote
Siva @sprasanth Aug 18 19:04 Hi! I am trying to learn how to align code in
spacemacs. I have similar piece of code everywhere in my file and they are all
messed up. How can I align them ? I would like to have State name start from
column 6, City name start from Column 8 and Restuarant name start from
Column 10.

California begin\\
SanJose\\
SanFransisco\\
SantaCruz\\
Restaurants begin\\
Subway\\
Starbucks\\
end\\
end
  #+end_quote

  As a solution I suggested to use a keyboard macro. The following macro will
  work fine after you first 'create enough space' for the rectangular blocks
  (using ~(string-replace "begin" "    begin")~:
 #+begin_src emacs-lisp :tangle yes
               (fset 'to-columns
                  (kmacro-lambda-form [?m ?m ?/ ?b ?e ?g ?i ?n return
                                          ?d ?$ ?j ?0 ?\C-v ?n ?h ?d ?k ?A S-insert escape
                                          ?n ?d ?d ?\C-v ?/ ?e ?n ?d return
                                          ?k ?$ ?d ?\' ?m ?A ?
                                          ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?
                                          ?  S-insert escape ?n ?d ?d ?d ?d] 0 "%d"))
 #+end_src
 For it to work on a block of any form, I probably had to insert some spaces
 after /Starbucks/ before selecting and deleting the rectangular block.

** Terminal (vterm)
The most powerful terminal for emacs is [[https://github.com/akermu/emacs-libvterm][vterm]], it is great!

So build Emacs [[https://github.com/akermu/emacs-libvterm/issues/170][with module support]] or follow [[https://github.com/akermu/emacs-libvterm#installation][the installation instructions for
vterm]]. Don't forget to [[https://develop.spacemacs.org/layers/+tools/shell/README.html#install-vterm][configure the path to your .bash-history file]] and set
vterm as your default shell using:
#+begin_src emacs-lisp :tangle yes
  (shell :variables
         shell-default-shell 'vterm
         spacemacs-vterm-history-file-location "~/.bash_history"
#+end_src


Finally you can make a shortcut like ~emacsclient -e '(vterm)'~, to use vterm by
default instead of some less convenient terminal.

** Images
*** Create a XBM image
  #+begin_src emacs-lisp :tangle yes :file images/test.xbm
    (save-im (create-image (vconcat
                                   (make-vector 50 (make-bool-vector 100 t))
                                   (make-vector 50 (make-bool-vector 100 nil)))
                                  'xbm t
                                  :width 100 :height 100
                                  :foreground "blue" :background "orange"
                                  :help-echo "this does not work")
                    :data)
  #+end_src

*** Create a PBM image
#+begin_src emacs-lisp :tangle yes
  (create-image
   (concat "P1 "
           "120 "
           "200 "
           "000010000010000010000010000010000010100010011100000000000000")
   'pbm t)
 #+end_src

 #+begin_src emacs-lisp :tangle yes :file images/test.xbm
  (image-property
   (create-image
    (concat "P1 " "120 " "200 "
            (mapconcat 'identity
                       (mapcar (lambda (row)
                                 (mapconcat 'identity
                                            (make-list 20
                                                       (mapconcat (lambda (c)
                                                                    (make-string 20 c))
                                                                  row
                                                                  ""))
                                            ""))
                               '("000010" "000010" "000010" "000010" "000010"
                                 "000010" "100010" "011100" "000000" "000000"))
                       ""))
    'pbm t)
   :data)

#+end_src

*** Create a help-echo over an image (part)
   #+begin_src emacs-lisp :tangle yes
             (create-image "~/testt.png" nil nil
                           :map '(((rect . ((0 . 0) . (200 . 200)))
                                   hello
                                   (pointer arrow help-echo "hello"))))
   #+end_src
